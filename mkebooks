#!/usr/bin/python

import os
import subprocess
import sys

from optparse import OptionParser
from common import mkebook

uname = subprocess.check_output(["uname", "-a"])
if uname.lower().find("darwin") != -1:
  is_mac = True
else:
  is_mac = False

script_path = os.path.dirname(os.path.realpath(sys.argv[0]))
parser = OptionParser()
parser.add_option("-k", "--kindle", dest="kindle",
                  action="store_true",
                  help="Generate Kindle file")
parser.add_option("-f", "--force", dest="force",
                  action="store_true",
                  help="Force generate output, even if input is older")
parser.add_option("-d", "--debug", dest="debug",
                  action="store_true",
                  help="Enable debug mode.")
parser.add_option("-s", "--skip_spelling", dest="skip_spelling",
                  action="store_true",
                  help="Skip spell-checking")

(options, args) = parser.parse_args()

if len(args) < 2:
  # No folder given in argument. Use ".".
  cwd = os.path.realpath(".")
else:
  cwd = os.path.realpath(args[1])
configFileName = "config.ebook"
ebookRoots = []

for root, dirs, files in os.walk("."):
  if configFileName in files:
    ebookRoots.append(root)

if len(ebookRoots) == 0:
  print "No ebook to make. Please create a config.ebook file."
  exit(0)

for ebookRoot in ebookRoots:
  os.chdir(ebookRoot)
  retval = mkebook.make_ebook(options, ebookRoot)
  # Retval 2 means skip. Aspell issues on Mac.
  if retval is not 2 and not options.skip_spelling and not is_mac:
    os.system(os.path.join(script_path, "checkspelling"))
  os.chdir(cwd)

print "All up to date."
